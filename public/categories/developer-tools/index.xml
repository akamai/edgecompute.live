<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Developer Tools on Edge Compute Live</title>
    <link>http://localhost:1313/Akamai-Edge-Compute-Live/categories/developer-tools/</link>
    <description>Recent content in Developer Tools on Edge Compute Live</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1313/Akamai-Edge-Compute-Live/categories/developer-tools/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>API Orchestration</title>
      <link>http://localhost:1313/Akamai-Edge-Compute-Live/examples/api-orchestration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/Akamai-Edge-Compute-Live/examples/api-orchestration/</guid>
      <description>&lt;p&gt;Demonstrates how EdgeWorkers can be used to merge multiple internal APIs into a single API response from a user experience perspective.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cachekey Device Type</title>
      <link>http://localhost:1313/Akamai-Edge-Compute-Live/examples/cachekey-device-type/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/Akamai-Edge-Compute-Live/examples/cachekey-device-type/</guid>
      <description>&lt;p&gt;This example includes the device type (tablet or mobile) from a PMUSER variable in the computed cache key for an Edge Server.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Device Routing</title>
      <link>http://localhost:1313/Akamai-Edge-Compute-Live/examples/device-routing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/Akamai-Edge-Compute-Live/examples/device-routing/</guid>
      <description>&lt;p&gt;Implements modification of the forward origin path of the URL to return device-specific content.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Dynamic Callback</title>
      <link>http://localhost:1313/Akamai-Edge-Compute-Live/examples/dynamic-callback/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/Akamai-Edge-Compute-Live/examples/dynamic-callback/</guid>
      <description>&lt;p&gt;Demonstrates how an EdgeWorker can wrap a JSON response with a dynamic unique callback function leveraging Response Provider and Stream API for efficient content transformation. The EdgeWorker should be enabled on JSON requests containing a callback query parameter, which can be managed via Property Manager. When such a request comes in, this EdgeWorker removes the callback query parameter, makes a sub-request to fetch the JSON data, and serves it as a stream. The EdgeWorker code adds a prefix with the callback function name captured from the query parameter and a suffix. Both JSON data and transformed data can be cached using standard &amp;ldquo;&amp;ldquo;Caching&amp;rdquo;&amp;rdquo; behavior in Property Manager if caching is allowed.&lt;/p&gt;</description>
    </item>
    <item>
      <title>EdgeKV Hello World</title>
      <link>http://localhost:1313/Akamai-Edge-Compute-Live/examples/edgekv-hello-world/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/Akamai-Edge-Compute-Live/examples/edgekv-hello-world/</guid>
      <description>&lt;p&gt;The Hello World example demonstrates how you can use EdgeWorkers and EdgeKV to implement a simple Dynamic Content Assembly use case whereby the HTML response is dynamically constructed on the edge based on the content of the Accept-Language header in the client request. It also shows how you could use the getText() helper method.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Find Replace Stream</title>
      <link>http://localhost:1313/Akamai-Edge-Compute-Live/examples/find-replace-stream/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/Akamai-Edge-Compute-Live/examples/find-replace-stream/</guid>
      <description>&lt;p&gt;Demonstrates how an EdgeWorker can modify an HTTP response stream by performing a find &amp;amp; replace operation on the response. The example searches for specific text and replaces it with another across the entire response body. It accepts an optional parameter to specify the number of replacements. If not specified, the replacement occurs as many times as possible. The demo replaces &amp;ldquo;&amp;ldquo;This is the original string&amp;rdquo;&amp;rdquo; with &amp;ldquo;&amp;ldquo;This is the updated string&amp;rdquo;&amp;rdquo;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hello World</title>
      <link>http://localhost:1313/Akamai-Edge-Compute-Live/examples/hello-world/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/Akamai-Edge-Compute-Live/examples/hello-world/</guid>
      <description>&lt;p&gt;With this example you learn the basics of creating, deploying and debugging an EdgeWorker that generates a simple html page at the Edge and adds a response header.&lt;/p&gt;</description>
    </item>
    <item>
      <title>HTML Rewriter</title>
      <link>http://localhost:1313/Akamai-Edge-Compute-Live/examples/html-rewriter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/Akamai-Edge-Compute-Live/examples/html-rewriter/</guid>
      <description>&lt;p&gt;Leverage EdgeWorkers html-rewriter to efficiently generate dynamic HTML content by combining JSON data from an API endpoint with an HTML template. Additionally, if the request is made by a logged-in user, a discount code will be dynamically incorporated into the rendered document. By performing these operations at the Edge with EdgeWorkers, we enhance site performance, offload server resources, and unlock SEO advantages. The template, JSON data, and rendered content can all be efficiently cached at the Edge, further optimizing response times and improving the overall site experience.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Origin Error Handling</title>
      <link>http://localhost:1313/Akamai-Edge-Compute-Live/examples/origin-error-handling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/Akamai-Edge-Compute-Live/examples/origin-error-handling/</guid>
      <description>&lt;p&gt;Translates a HTTP 503 status code (service unavailable) from an overloaded origin into an HTML page presenting the information in a more user-friendly way. It includes JavaScript to retry after the period indicated by the &amp;lsquo;Retry-After&amp;rsquo; header from the origin, if present. Otherwise, it retries after a default number of seconds. Configuring the property to cache HTTP error responses, even for a short duration, makes sense for dynamic content.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Response Manipulation</title>
      <link>http://localhost:1313/Akamai-Edge-Compute-Live/examples/response-manipulation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/Akamai-Edge-Compute-Live/examples/response-manipulation/</guid>
      <description>&lt;p&gt;Demonstrates how an EdgeWorker can modify an HTML response stream by adding content to the response. The example adds a script to the page just before the closing head tag.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
